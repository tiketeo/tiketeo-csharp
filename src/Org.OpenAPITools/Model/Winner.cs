/*
 * Tiketeo API
 *
 * Autenticaci√≥n: Bearer <secret_key> 
 *
 * The version of the OpenAPI document: v1
 * Contact: romario.lopez@tiketeo.mx
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Winner
    /// </summary>
    [DataContract]
    public partial class Winner :  IEquatable<Winner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Winner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="claimed">claimed.</param>
        /// <param name="ticket">ticket.</param>
        /// <param name="prize">prize.</param>
        public Winner(Guid id = default(Guid), bool claimed = default(bool), WinnerTicket ticket = default(WinnerTicket), WinnerPrize prize = default(WinnerPrize))
        {
            this.Id = id;
            this.Claimed = claimed;
            this.Ticket = ticket;
            this.Prize = prize;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Claimed
        /// </summary>
        [DataMember(Name="claimed", EmitDefaultValue=false)]
        public bool Claimed { get; set; }

        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [DataMember(Name="ticket", EmitDefaultValue=false)]
        public WinnerTicket Ticket { get; set; }

        /// <summary>
        /// Gets or Sets Prize
        /// </summary>
        [DataMember(Name="prize", EmitDefaultValue=false)]
        public WinnerPrize Prize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Winner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Claimed: ").Append(Claimed).Append("\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("  Prize: ").Append(Prize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Winner);
        }

        /// <summary>
        /// Returns true if Winner instances are equal
        /// </summary>
        /// <param name="input">Instance of Winner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Winner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Claimed == input.Claimed ||
                    (this.Claimed != null &&
                    this.Claimed.Equals(input.Claimed))
                ) && 
                (
                    this.Ticket == input.Ticket ||
                    (this.Ticket != null &&
                    this.Ticket.Equals(input.Ticket))
                ) && 
                (
                    this.Prize == input.Prize ||
                    (this.Prize != null &&
                    this.Prize.Equals(input.Prize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Claimed != null)
                    hashCode = hashCode * 59 + this.Claimed.GetHashCode();
                if (this.Ticket != null)
                    hashCode = hashCode * 59 + this.Ticket.GetHashCode();
                if (this.Prize != null)
                    hashCode = hashCode * 59 + this.Prize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
